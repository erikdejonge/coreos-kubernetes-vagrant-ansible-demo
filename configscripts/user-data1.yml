#cloud-config

---
hostname: core1.a8.nl
write_files:
- path: /etc/systemd/network/static.network
  permissions: '0644'
  owner: root
  content: |+
    [Match]
    Name=ens34

    [Network]
    Address=192.168.14.41/24
    Gateway=192.168.14.254

    DNS=8.8.8.8
    DNS=8.8.4.4

- path: /etc/environment
  permissions: '0644'
  content: |-
    COREOS_PUBLIC_IPV4=192.168.14.41
    COREOS_PRIVATE_IPV4=127.0.0.1
- path: /etc/profile.d/etcd-envvars.sh
  permissions: '0644'
  owner: root
  content: |
    #!/bin/sh
    alias bootj="sudo journalctl --boot"
    alias ccloud="cat /var/lib/coreos-vagrant/vagrantfile-user-data"
    alias cp="cp -iv"
    alias cpu_hogs="ps -Ao pid,pcpu,size,user,args --sort=-pcpu | head -n 10; echo"
    alias cvid="cat /etc/os-release|grep VERSION_ID"
    alias cvall="cat /etc/os-release"
    alias dusort="du -hs * | sort -h"
    alias etcdver="curl -L http://127.0.0.1:4001/version"
    alias fleetlist="fleetctl list-machines"
    alias flush_dns="dscacheutil -flushcache"            # flush_dns:     Flush out the DNS Cache
    alias ip_info0="ipconfig getpacket en0"              # ip_info0:      Get info on connections for en0
    alias ip_info1="ipconfig getpacket en1"              # ip_info1:      Get info on connections for en1
    alias jboot="journalctl --boot"
    alias jetcd="journalctl -u etcd"
    alias jf="journalctl -f"
    alias jfetcd="journalctl -f -u etcd"
    alias jffdocker="journalctl -f -u docker"
    alias jfflannel="journalctl -f -u flannel"
    alias jffleet="journalctl -f -u fleet"
    alias jflannel="journalctl -u flannel"
    alias jfleet="journalctl -u fleet"
    alias jdocker="journalctl -u docker"
    alias ju="journalctl -u $1"
    alias jfu="journalctl -f -u $1"
    alias locate="sudo find / | grep $1"
    alias lsock="sudo /usr/sbin/lsof -i -P"             # lsock:        Display open sockets
    alias lsock_t="sudo /usr/sbin/lsof -nP | grep TCP"   # lsock_t:       Display only open TCP sockets
    alias lsock_u="sudo /usr/sbin/lsof -nP | grep UDP"   # lsock_u:       Display only open UDP sockets
    alias lsunits="systemctl list-units | grep $1"
    alias lsunitsfl="fleetctl list-units | grep $1"
    alias mem_hogs="ps -Ao pid,pcpu,size,user,args --sort=-size | head -n 10; echo"
    alias mkdir="mkdir -pv"
    alias mv="mv -iv"
    alias myip="curl ip.appspot.com"                    # myip:         Public facing IP Address
    alias net_cons="lsof -i"                             # net_cons:      Show all open TCP/IP sockets
    alias network="cat /etc/systemd/network/static.network"
    alias open_ports="sudo lsof -i | grep LISTEN"        # open_ports:    All listening connections
    alias qfind="find . -name"
    alias runcloudcfg="sudo coreos-cloudinit --from-file /var/lib/coreos-vagrant/vagrantfile-user-data"
    alias show_blocked="sudo ipfw list"                  # show_blocked:  All ipfw rules inc/ blocked IPs
    alias st="sudo systemctl status $1"
    alias stdocker="sudo systemctl status docker"
    alias stetcd="sudo systemctl status etcd"
    alias stflannel="sudo systemctl status flannel"
    alias stfleet="sudo systemctl status fleet"
    alias stopunit="sudo systemctl stop $1"
    alias stopunitf="sudo fleetctl stop $1"
    alias synctime="sudo systemctl stop ntpd.service;sudo ntpdate pool.ntp.org;sudo systemctl start ntpd.service"
    export ETCDCTL_PEERS='http://192.168.14.41:4001'
    export FLEETCTL_ENDPOINT='http://192.168.14.41:4001'
    export DEFAULT_IPV4='192.168.14.41'
- path: /opt/bin/waiter.sh
  owner: root
  content: |
    #! /usr/bin/bash
    until curl http://127.0.0.1:4001/v2/machines; do sleep 2; done
- path: /etc/resolv.conf
  permissions: '0644'
  owner: root
  content: |
    nameserver 8.8.8.8
- path: /etc/ntp.conf
  content: |
    # Common pool
    server 0.pool.ntp.org
    server 1.pool.ntp.org
    # - Allow only time queries, at a limited rate.
    # - Allow all local queries (IPv4, IPv6)
    restrict default nomodify nopeer noquery limited kod
    restrict 127.0.0.1
    restrict [::1]
- path: /etc/ssh/sshd_config
  permissions: '0600'
  owner: root:root
  content: |
    # Use most defaults for sshd configuration.
    UsePrivilegeSeparation sandbox
    Subsystem sftp internal-sftp
    PermitRootLogin no
    AllowUsers core
    PasswordAuthentication no
    ChallengeResponseAuthentication no
coreos:
  update:
    group: alpha
    reboot-strategy: reboot
  units:
  - name: setup-network-environment.service
    command: start
    content: |
      [Unit]
      Description=Setup Network Environment
      Documentation=https://github.com/kelseyhightower/setup-network-environment
      Requires=network-online.target
      After=network-online.target
      [Service]
      ExecStartPre=-/usr/bin/mkdir -p /opt/bin
      ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/k8s/setup-network-environment
      ExecStartPre=/usr/bin/chmod +x /opt/bin/setup-network-environment
      ExecStart=/opt/bin/setup-network-environment
      RemainAfterExit=yes
      Type=oneshot
  - name: etcd.service
    command: start
    content: |
      [Unit]
      Description=etcd
      Requires=setup-network-environment.service
      After=setup-network-environment.service
      [Service]
      EnvironmentFile=/etc/network-environment
      User=etcd
      PermissionsStartOnly=true
      ExecStart=/usr/bin/etcd \
      --name ${DEFAULT_IPV4} \
      --addr ${DEFAULT_IPV4}:4001 \
      --bind-addr 0.0.0.0 \
      --cluster-active-size 1 \
      --data-dir /var/lib/etcd \
      --http-read-timeout 86400 \
      --peer-addr ${DEFAULT_IPV4}:7001 \
      --snapshot true
      Restart=always
      RestartSec=10s
  - name: fleet.socket
    command: start
    content: |
      [Socket]
      ListenStream=/var/run/fleet.sock
  - name: fleet.service
    command: start
    content: |
      [Unit]
      Description=fleet daemon
      Wants=etcd.service
      After=etcd.service
      Wants=fleet.socket
      After=fleet.socket
      [Service]
      Environment="FLEET_ETCD_SERVERS=http://127.0.0.1:4001"
      Environment="FLEET_METADATA=role=master"
      ExecStart=/usr/bin/fleetd
      Restart=always
      RestartSec=10s
  - name: etcd-waiter.service
    command: start
    content: |
      [Unit]
      Description=etcd waiter
      Wants=network-online.target
      Wants=etcd.service
      After=etcd.service
      After=network-online.target
      Before=flannel.service
      Before=setup-network-environment.service
      [Service]
      ExecStartPre=/usr/bin/chmod +x /opt/bin/waiter.sh
      ExecStart=/usr/bin/bash /opt/bin/waiter.sh
      RemainAfterExit=true
      Type=oneshot
  - name: flannel.service
    command: start
    content: |
      [Unit]
      Wants=etcd-waiter.service
      After=etcd-waiter.service
      Requires=etcd.service
      After=etcd.service
      After=network-online.target
      Wants=network-online.target
      Description=flannel is an etcd backed overlay network for containers
      [Service]
      Type=notify
      ExecStartPre=-/usr/bin/mkdir -p /opt/bin
      ExecStartPre=-/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/k8s/flanneld
      ExecStartPre=-/usr/bin/chmod +x /opt/bin/flanneld
      ExecStartPre=-/usr/bin/etcdctl mk /coreos.com/network/config '{"Network":"10.244.0.0/16", "Backend": {"Type": "vxlan"}}'
      ExecStart=/opt/bin/flanneld
  - name: settimezone.service
    command: start
    content: |
      [Unit]
      Description=Set the timezone
      [Service]
      ExecStart=/usr/bin/timedatectl set-timezone Europe/Amsterdam
      RemainAfterExit=yes
      Type=oneshot
  - name: kube-apiserver.service
    command: start
    content: |
      [Unit]
      Description=Kubernetes API Server
      Documentation=https://github.com/GoogleCloudPlatform/kubernetes
      Requires=etcd.service
      After=etcd.service
      [Service]
      ExecStartPre=-/usr/bin/mkdir -p /opt/bin
      # new version is 9.3
      ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/v0.11.0/bin/linux/amd64/kube-apiserver
      ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-apiserver
      ExecStart=/opt/bin/kube-apiserver \
      --address=0.0.0.0 \
      --port=8080 \
      --portal_net=10.100.0.0/16 \
      --etcd_servers=http://127.0.0.1:4001 \
      --public_address_override=$private_ipv4 \
      --logtostderr=true
      Restart=always
      RestartSec=10
  - name: kube-controller-manager.service
    command: start
    content: |
      [Unit]
      Description=Kubernetes Controller Manager
      Documentation=https://github.com/GoogleCloudPlatform/kubernetes
      Requires=kube-apiserver.service
      After=kube-apiserver.service
      [Service]
      ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/v0.11.0/bin/linux/amd64/kube-controller-manager
      ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-controller-manager
      ExecStart=/opt/bin/kube-controller-manager \
      --master=127.0.0.1:8080 \
      --logtostderr=true
      Restart=always
      RestartSec=10
  - name: kube-scheduler.service
    command: start
    content: |
      [Unit]
      Description=Kubernetes Scheduler
      Documentation=https://github.com/GoogleCloudPlatform/kubernetes
      Requires=kube-apiserver.service
      After=kube-apiserver.service
      [Service]
      ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/v0.11.0/bin/linux/amd64/kube-scheduler
      ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-scheduler
      ExecStart=/opt/bin/kube-scheduler --master=127.0.0.1:8080
      Restart=always
      RestartSec=10
  - name: kube-register.service
    command: start
    content: |
      [Unit]
      Description=Kubernetes Registration Service
      Documentation=https://github.com/kelseyhightower/kube-register
      Requires=kube-apiserver.service
      After=kube-apiserver.service
      Requires=fleet.service
      After=fleet.service
      [Service]
      ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/k8s/kube-register
      ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-register
      ExecStart=/opt/bin/kube-register \
      --metadata=role=node \
      --fleet-endpoint=unix:///var/run/fleet.sock \
      --api-endpoint=http://127.0.0.1:8080
      Restart=always
      RestartSec=10
users:
- name: myusername
  groups:
  - docker
  - systemd-journal
  - sudo
  ssh_authorized_keys:
  - ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ==
    vagrant insecure public key
ssh_authorized_keys:
- ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ==
  vagrant insecure public key


