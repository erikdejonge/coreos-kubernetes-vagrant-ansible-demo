#cloud-config

---
hostname: core3.a8.nl
write_files:
- path: /etc/systemd/network/static.network
  permissions: '0644'
  owner: root
  content: |+
    [Match]
    Name=ens34

    [Network]
    Address=192.168.14.43/24
    Gateway=192.168.14.254

    DNS=8.8.8.8
    DNS=8.8.4.4

- path: /etc/environment
  permissions: '0644'
  content: |-
    COREOS_PUBLIC_IPV4=192.168.14.43
    COREOS_PRIVATE_IPV4=127.0.0.1
- path: /etc/profile.d/etcd-envvars.sh
  permissions: '0644'
  owner: root
  content: |
    #!/bin/sh
    alias bootj="sudo journalctl --boot"
    alias ccloud="cat /var/lib/coreos-vagrant/vagrantfile-user-data"
    alias cp="cp -iv"
    alias cpu_hogs="ps -Ao pid,pcpu,size,user,args --sort=-pcpu | head -n 10; echo"
    alias cvid="cat /etc/os-release|grep VERSION_ID"
    alias cvall="cat /etc/os-release"
    alias dusort="du -hs * | sort -h"
    alias etcdver="curl -L http://127.0.0.1:4001/version"
    alias fleetlist="fleetctl list-machines"
    alias flush_dns="dscacheutil -flushcache"            # flush_dns:     Flush out the DNS Cache
    alias ip_info0="ipconfig getpacket en0"              # ip_info0:      Get info on connections for en0
    alias ip_info1="ipconfig getpacket en1"              # ip_info1:      Get info on connections for en1
    alias jboot="journalctl --boot"
    alias jetcd="journalctl -u etcd"
    alias jf="journalctl -f"
    alias jfetcd="journalctl -f -u etcd"
    alias jffdocker="journalctl -f -u docker"
    alias jfflannel="journalctl -f -u flannel"
    alias jffleet="journalctl -f -u fleet"
    alias jflannel="journalctl -u flannel"
    alias jfleet="journalctl -u fleet"
    alias jdocker="journalctl -u docker"
    alias ju="journalctl -u $1"
    alias jfu="journalctl -f -u $1"
    alias locate="sudo find / | grep $1"
    alias lsock="sudo /usr/sbin/lsof -i -P"             # lsock:        Display open sockets
    alias lsock_t="sudo /usr/sbin/lsof -nP | grep TCP"   # lsock_t:       Display only open TCP sockets
    alias lsock_u="sudo /usr/sbin/lsof -nP | grep UDP"   # lsock_u:       Display only open UDP sockets
    alias lsunits="systemctl list-units | grep $1"
    alias lsunitsfl="fleetctl list-units | grep $1"
    alias mem_hogs="ps -Ao pid,pcpu,size,user,args --sort=-size | head -n 10; echo"
    alias mkdir="mkdir -pv"
    alias mv="mv -iv"
    alias myip="curl ip.appspot.com"                    # myip:         Public facing IP Address
    alias net_cons="lsof -i"                             # net_cons:      Show all open TCP/IP sockets
    alias network="cat /etc/systemd/network/static.network"
    alias open_ports="sudo lsof -i | grep LISTEN"        # open_ports:    All listening connections
    alias qfind="find . -name"
    alias runcloudcfg="sudo coreos-cloudinit --from-file /var/lib/coreos-vagrant/vagrantfile-user-data"
    alias show_blocked="sudo ipfw list"                  # show_blocked:  All ipfw rules inc/ blocked IPs
    alias st="sudo systemctl status $1"
    alias stdocker="sudo systemctl status docker"
    alias stetcd="sudo systemctl status etcd"
    alias stflannel="sudo systemctl status flannel"
    alias stfleet="sudo systemctl status fleet"
    alias stopunit="sudo systemctl stop $1"
    alias stopunitf="sudo fleetctl stop $1"
    alias synctime="sudo systemctl stop ntpd.service;sudo ntpdate pool.ntp.org;sudo systemctl start ntpd.service"
    export ETCDCTL_PEERS='http://192.168.14.41:4001'
    export FLEETCTL_ENDPOINT='http://192.168.14.41:4001'
    export DEFAULT_IPV4='192.168.14.43'
- path: /etc/resolv.conf
  permissions: '0644'
  owner: root
  content: |
    nameserver 8.8.8.8
- path: /etc/ntp.conf
  content: |
    # Common pool
    server 0.pool.ntp.org
    server 1.pool.ntp.org
    # - Allow only time queries, at a limited rate.
    # - Allow all local queries (IPv4, IPv6)
    restrict default nomodify nopeer noquery limited kod
    restrict 127.0.0.1
    restrict [::1]
coreos:
  update:
    group: alpha
    reboot-strategy: reboot
  units:
  - name: etcd.service
    mask: true
  - name: fleet.service
    command: start
    content: |
      [Unit]
      Description=fleet daemon
      Wants=fleet.socket
      After=fleet.socket
      [Service]
      Environment="FLEET_ETCD_SERVERS=http://192.168.14.41:4001"
      Environment="FLEET_METADATA=role=node"
      ExecStart=/usr/bin/fleetd
      Restart=always
      RestartSec=10s
  - name: flannel.service
    command: start
    content: |
      [Unit]
      After=network-online.target
      Wants=network-online.target
      Description=flannel is an etcd backed overlay network for containers
      [Service]
      Type=notify
      ExecStartPre=-/usr/bin/mkdir -p /opt/bin
      ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/k8s/flanneld
      ExecStartPre=/usr/bin/chmod +x /opt/bin/flanneld
      ExecStart=/opt/bin/flanneld -etcd-endpoints http://192.168.14.41:4001
  - name: docker.service
    command: start
    content: |
      [Unit]
      After=flannel.service
      Wants=flannel.service
      Description=Docker Application Container Engine
      Documentation=http://docs.docker.io
      [Service]
      EnvironmentFile=/run/flannel/subnet.env
      ExecStartPre=/bin/mount --make-rprivate /
      ExecStart=/usr/bin/docker -d --bip=${FLANNEL_SUBNET} --mtu=${FLANNEL_MTU} -s=overlay -H fd://
      [Install]
      WantedBy=multi-user.target
  - name: setup-network-environment.service
    command: start
    content: |
      [Unit]
      Description=Setup Network Environment
      Documentation=https://github.com/kelseyhightower/setup-network-environment
      Requires=network-online.target
      After=network-online.target
      [Service]
      ExecStartPre=-/usr/bin/mkdir -p /opt/bin
      ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/k8s/setup-network-environment
      ExecStartPre=/usr/bin/chmod +x /opt/bin/setup-network-environment
      ExecStart=/opt/bin/setup-network-environment
      RemainAfterExit=yes
      Type=oneshot
  - name: settimezone.service
    command: start
    content: |
      [Unit]
      Description=Set the timezone
      [Service]
      ExecStart=/usr/bin/timedatectl set-timezone Europe/Amsterdam
      RemainAfterExit=yes
      Type=oneshot
  - name: kube-proxy.service
    command: start
    content: |
      [Unit]
      Description=Kubernetes Proxy
      Documentation=https://github.com/GoogleCloudPlatform/kubernetes
      Requires=setup-network-environment.service
      After=setup-network-environment.service

      [Service]
      ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/v0.11.0/bin/linux/amd64/kube-proxy
      ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-proxy
      ExecStart=/opt/bin/kube-proxy \
      --etcd_servers=http://192.168.14.41:4001 \
      --logtostderr=true
      Restart=always
      RestartSec=10
  - name: kube-kubelet.service
    command: start
    content: |
      [Unit]
      Description=Kubernetes Kubelet
      Documentation=https://github.com/GoogleCloudPlatform/kubernetes
      Requires=setup-network-environment.service
      After=setup-network-environment.service

      [Service]
      EnvironmentFile=/etc/network-environment
      ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/v0.11.0/bin/linux/amd64/kubelet
      ExecStartPre=/usr/bin/chmod +x /opt/bin/kubelet
      ExecStart=/opt/bin/kubelet \
      --address=0.0.0.0 \
      --port=10250 \
      --hostname_override=$private_ipv4 \
      --etcd_servers=http://192.168.14.41:4001 \
      --logtostderr=true
      Restart=always
      RestartSec=10
users:
- name: myusername
  groups:
  - docker
  - systemd-journal
  - sudo
  ssh_authorized_keys:
  - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAEAQDfLIM6YGwWjcg1DVTOWZLT/zXPmpT3kgwt0F9JLQOqHKJBCHAr7AzSiiFmjlXjsYaPRvX/hS3/L5eXWNxKAqo3gbLSISVxsT4ZCHydMFu/+Do08iWEKJhX6etHAcIrMfOlPGpHZ4DD1uyE97Es2Pus0vL5b4Bpdq7P+gQLt/S2aiDsp0n69mmQNLNmnkzZxHxCBd8q5YherAj6Z3n9eOr3g6X4wwqiECkRxw4z4y8DHPfBgzoj+v7WOGM5C/dwAH7M9ticePSxDlvkYXk4QWVcqp6qfvWUNrz1o/txYEw+eR6wbT6A5qncd9dvKE3gA86EcCrIZNeF5E4HiOd3RY7RAgxacm8+QRBPUJr38cY6aWQ/RMu/T0tQTSpzpbV1/GagzvXkppAY8lR+4zQ+dOXuFm5UWqCtf5t5rVxME9dECLX3uB92Yots+ERcmFwF7IbW+wii/RKQo7Qd4PX1uw1sbjIz1C+mWzb8lbn9JprufGAC2xahlZ7p+dmthgzzLr5UH2fvMFA+iepXCrlSA2tnu2earN6X7HJi1Ohn1urPGTe4dCvlFw0HyHpStlC9bmugktmmCdhzEvODJFJs4Nub3iO4b4Yu8ueRQnHlB9v0C2ZHKGNJOQWtC9iRTUMP841j2bQlJVKb0+RE5+evNjCcg3EkwveIPTiiktnoS13DRR5TRuNzQ/UKPgRWsV7BbHg4Taeb4ugFV0aLtiW/j3+8O3lURWyY9gWA+My2+Gn/w7AzOq4iw1v5q0jmTZowW9ZheKv/5dpB0e2Mz+XYc2f93qXiVg2SkG7RUKIRGHlLkX6YydfuMxgnBo+tOI9dd4N22n7P9DTeCZb2vNfxLWQv2JXvzDTOffnwXN1cHgbxDxG1SIA5IheGbeSn+YMycW46zPyYznagZXfDZm3rjUh56D1Lc9dVgB4B26ywtJzKp5HIkpIO7CgsN2P6YRk5qPi14R4/WaJiRtv7040JvK+Fzj1DwQIj4YHcrcamV+HHaGMj4PR3dKmmC8E0iQc10nvuEm90spvnf/iXoHBlAVzfCEoRcU0tyxNIR8nqkeWwgl+/wZHBoVv5F5H8cRK0AE9O3+eN5vVblwOUPUi4r+uWbISXxhg+ioOJRZSv6l/9cSvAMdcS8ByiLWPHhULCTF8bF5gt/vVmC2ianoM835wnYX611oQumvrtmaBjgDUvpMnmo75WgcPAm1ci0hwzlqSIMsATkK8m4B7SsSy3QXYYj1yN/RHPn2BtZvQYhcK/elITV5Zm+KG/0EVi036JqivBPJPNMrpw/dEvrldGtZUw4+dSy1xcvl3HFUczk1KjqN22cetJbt1Gy7qZF6i2eN2xBnIMcWI9g6rF4wT2QaCb
    erik@a8.nl
  - ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ==
    vagrant insecure public key


